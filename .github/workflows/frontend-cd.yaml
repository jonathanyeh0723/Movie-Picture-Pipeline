name: Frontend Continuous Deployment

on:
  # Below 5 lines allow pipeline to be executed automatically on merges to the main branch
  pull_request:
    branches:
      - main
    types:
      - closed

  # Set manually triggered for testing
  workflow_dispatch: 

env:
  REACT_APP_MOVIE_API_URL: 5000

jobs:
  INSTALL_BUILD_TEST:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup NodeJS
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install, Build, Test
      run: |
        npm install
        npm run lint
        npm run test
      working-directory: ./starter/frontend

  DOCKER_BUILD:
    runs-on: ubuntu-latest
    needs: INSTALL_BUILD_TEST
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build --build-arg REACT_APP_MOVIE_API_URL=${{ env.REACT_APP_MOVIE_API_URL }} -t ${{ secrets.FRONTEND_REPO_NAME }}:latest .
        docker image ls
      working-directory: ./starter/frontend

  AWS_ECR_BUILD:
    runs-on: ubuntu-latest
    needs: DOCKER_BUILD
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:  ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Check image availability
      run: docker image ls

    - name: Logging into ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

    - name: Docker build, tag, push 
      run: |
        docker build --build-arg=REACT_APP_MOVIE_API_URL=http://localhost:5000 -t ${{ secrets.FRONTEND_REPO_NAME }}:latest .
        docker tag ${{ secrets.FRONTEND_REPO_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.FRONTEND_REPO_NAME }}:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.FRONTEND_REPO_NAME }}:latest
      working-directory: ./starter/frontend

  DEPLOY_K8s:
    runs-on: ubuntu-latest
    needs: AWS_ECR_BUILD
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:  ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
        sudo mv kustomize /usr/local/bin/

    - name: Update kubeconfig for EKS
      run: |
        aws eks --region us-east-2 update-kubeconfig --name cluster 

    - name: Set the image tag using Kustomize
      run: |
        kustomize edit set image frontend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.FRONTEND_REPO_NAME }}:latest
      working-directory: ./starter/frontend/k8s

    - name: Deploy to EKS
      run: |
        kustomize build | kubectl apply -f -
      working-directory: ./starter/frontend/k8s
