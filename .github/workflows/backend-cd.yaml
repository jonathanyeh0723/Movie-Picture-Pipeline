name: Backend Continuous Deployment

on:
  workflow_dispatch:

  pull_request:
    branches:
      - main

jobs:
  LINT_JOB:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pipenv
      run: python -m pip install pipenv

    - name: Install dependencies
      run: pipenv install --dev
  
    - name: Verify Pipfile
      run: cat Pipfile  # Verify the content of Pipfile to ensure lint script exists

    - name: Check pipenv environment
      run: pipenv --venv  # Verify that the virtual environment is created

    - name: Install flake8 explicitly
      run: pipenv install flake8
      working-directory: ./starter/backend

    - name: Activate virtualenv and run lint
      run: pipenv run lint
      working-directory: ./starter/backend

  TEST_JOB:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install pipenv
      run: python -m pip install pipenv

    - name: Install dependencies
      run: pipenv install --dev

    - name: Verify Pipfile
      run: cat Pipfile  # Verify the content of Pipfile to ensure lint script exists

    - name: Check pipenv environment
      run: pipenv --venv  # Verify that the virtual environment is created

    - name: Install flake8 explicitly
      run: pipenv install flake8
      working-directory: ./starter/backend

    - name: Activate virtualenv and run lint
      run: pipenv run test
      working-directory: ./starter/backend

  BUILD_JOB:
    runs-on: ubuntu-latest
    needs: [LINT_JOB, TEST_JOB]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:  ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Logging into ECR
      run: aws ecr get-login-password --region ${{ secrets.AWS_DEFAULT_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com

    - name: Docker build, tag, push
      run: |
        docker build -t ${{ secrets.BACKEND_REPO_NAME }}:latest .
        docker tag ${{ secrets.BACKEND_REPO_NAME }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.BACKEND_REPO_NAME }}:latest
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.BACKEND_REPO_NAME }}:latest
      working-directory: ./starter/backend

  DEPLOY_K8s:
    runs-on: ubuntu-latest
    needs: BUILD_JOB
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region:  ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
        sudo mv kustomize /usr/local/bin/

    - name: Update kubeconfig for EKS
      run: |
        aws eks --region us-east-2 update-kubeconfig --name cluster

    - name: Set the image tag using Kustomize
      run: |
        kustomize edit set image backend=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com/${{ secrets.BACKEND_REPO_NAME }}:latest
      working-directory: ./starter/backend/k8s

    - name: Deploy to EKS
      run: |
        kustomize build | kubectl apply -f -
      working-directory: ./starter/backend/k8s
